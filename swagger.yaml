swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "UrbanDiscovery"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "35.204.26.59"
basePath: "/UrbanDiscovery/server/web"
tags:
- name: "offer"
  description: "Everything about Offers"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
paths:
  /offer:
    post:
      tags:
      - "offer"
      summary: "Add a new offer"
      description: ""
      operationId: "addOffer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Offer object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Offer"
      responses:
        405:
          description: "Invalid input"
  /offer/findByCoordinates:
    get:
      tags:
      - "offer"
      summary: "Finds Offer by Coordinates"
      description: ""
      operationId: "findOffersByCoordinates"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "coordinates"
        in: "query"
        description: "Coodinates of the current position"
        required: true
        type: "string"
      - name: "distance"
        in: "query"
        description: "Maximum distance (m) to an offer"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Offer"
        400:
          description: "Invalid status value"
  /offer/findByUser:
    get:
      tags:
      - "offer"
      summary: "Find offers by user"
      description: ""
      operationId: "findOffersByUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userid"
        in: "query"
        description: "ID of the user"
        required: true
        type: "integer"
        format: "int64"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Offer"
        400:
          description: "Invalid status value"
  /offer/{offerId}:
    get:
      tags:
      - "offer"
      summary: "Find offer by ID"
      description: "Returns a single offer"
      operationId: "getOfferById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "offerId"
        in: "path"
        description: "ID of the offer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Offer"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Offer not found"
      security:
      - api_key: []
    
    delete:
      tags:
      - "offer"
      summary: "Deletes a offer"
      description: ""
      operationId: "deleteOffer"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "offerId"
        in: "path"
        description: "Offer id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Offer not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/id/{userid}:
    get:
      tags:
      - "user"
      summary: "Get user by user ID"
      description: ""
      operationId: "getUserByID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid userid supplied"
        404:
          description: "User not found"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstname:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      zip:
        type: "string"
      city:
        type: "string"
      coordinates:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      forgot_pw:
        type: "string"
      forgot_pw_time:
        type: "string"
    xml:
      name: "User"
  Offer:
    type: "object"
    required:
    - "title"
    - "start"
    - "end"
    properties:
      id:
        type: "integer"
        format: "int64"
      userid:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      condition:
        type: "string"
      start:
        type: "string"
        format: "datetime"
      end:
        type: "string"
        format: "datetime"
    xml:
      name: "Offer"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"